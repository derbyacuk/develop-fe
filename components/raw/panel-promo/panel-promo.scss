// pictures used should be fixed at a 3x4 ratio (1.33) so this value is used for the sake of readability in calculations
$image-aspect-ratio: 1.33;

// the image and pattern backgrounds are positioned absolutely so that they can be overlapped by the panel itself
// but the panel might not be tall enough to show all of the background image. We need to set a min-height on the
// container panel to get around this. The min-height should always be the height of the image (and no more) and
// because we reliably know the viewport width and the aspect ratio of the image, we can work this out.
//
// 100% viewport width - (40px margin * 2) - 10px gutter = the available space of 16 columns
// available space divided into the number of columns = the image width
// image width * aspect ratio of 4/3 = the image height

$gutter: 10px;
$margin: $max-size; // max-size comes from the fluid-margins calculations elsewhere. but above ipad portrait this is always 40px
$max-width: 100vw;
$total-columns: 16;
$image-columns: 11;
$width-ratio: $image-columns / $total-columns;

// height = 100% viewport width * image aspect ratio - the margins either side of the image
$image-height-mobile: #{'calc(' + 100vw * $image-aspect-ratio + ' + ' + fluid-margin(true) + ')'};

// on tablet devices, the image width is 11 columns
// I'm sorry, 130px is a magic number to make this work and I don't know why.
$image-height-tablet: #{'calc((((' + $max-width + ' - (130px)) * (' + $width-ratio + ')) - ' + $gutter + ') * ' + $image-aspect-ratio + ')'};

// on desktop devices, the image width is 9 columns
$image-columns: 6;
$width-ratio: $image-columns / $total-columns;
// I'm sorry, 60px is a magic number to make this work and I don't know why.
$image-height-desktop: #{'calc((((' + $max-width + ' - (60px)) * (' + $width-ratio + ')) - ' + $gutter + ') * ' + $image-aspect-ratio + ')'};

// the grid is capped at 1700px wide, so above that screen size we need to cap our max width calculations by using a fixed px instead of viewport width
$max-width: 1780px;
// I'm sorry, 60px is a magic number to make this work and I don't know why.
$image-height-large-desktop: #{'calc((((' + $max-width + ' - (60px)) * (' + $width-ratio + ')) - ' + $gutter + ') * ' + $image-aspect-ratio + ')'};


.panel-promo {
    lost-column: 8/8;
    display: flex;
    flex-wrap: wrap;
    lost-utility: clearfix;

    &-container {
        @include full-bleed;
        position: relative;
        @include margin-medium;
    
        @include for-tablet-portrait-up {
            @include margin-large;
        }
    }

    &-background-container {
        @include background-container-full-bleed;
    }

    &-background-img {
        position: absolute;
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    &-title {
         @include full-bleed-inset;
         text-align: right;

        h2 {
            font-size: responsive 80px 180px;
            font-range: $mobile-portrait $desktop;
            margin-bottom: 0;
            color: $white;
            position: relative; 
        }

        .panel-promo-title-bottom-left-align & {

            @include for-tablet-landscape-up {
                position: absolute;
                bottom: 0;
                left: 0;
                text-align: left;
            }
        }
    }

    &-content {

        .panel-promo-no-title & {
            @include padding-medium('top');
        }

        .panel-promo-title-bottom-left-align & {

            @include for-tablet-landscape-up {
                @include padding-medium('top');
            }
        }

        @include for-tablet-portrait-up {
            display: flex;
            align-items: center;
            justify-content: center;
            lost-utility: clearfix;

            // use for left align image - not sure this really works in practice though
            // .panel-promo-left-align & {
            //     flex-direction: row-reverse;
            // }
        }
    }

    &-panel {
        @include full-bleed-inset;
        position: relative;

        @include for-tablet-portrait-up {
            lost-column: 8/16 0 0;
        }

        @include for-desktop-up {
            lost-offset: 1/16;
            lost-column: 5/16 0 0;
        }

        .panel-promo-title-bottom-left-align & {

            @include for-tablet-landscape-up {
                padding-bottom: 180px;
            }
        }

        &-inner {
            color: $white;
            margin-top: 1.125rem;

            // for accessiblity we need to use an h2, but want it to look like an h3
            h2, .h2 {
                @extend .h3;
                color: $white;
            }

            .button {
                margin-bottom: 0px;
            }
        }
    }


    &-image-container {
        margin-bottom: 0;
        font-size: 0;
        @include full-bleed-inset;
        position: relative;
        text-align: center;

        @include for-tablet-portrait-up {
            lost-column: 8/16 0;
        }

        @include for-desktop-up {
            lost-offset: 1/16;
            lost-column: 9/16 0;
        }

        img {
            max-width: 100%;
            max-height: 400px;
            max-height: $image-height-mobile;

            @include for-tablet-portrait-up {
                max-height: $image-height-tablet;
            }

            @include for-largerthan-ipad-portrait {
                max-height: $image-height-desktop;
            }

            @media (min-width: 1780px) {
                max-height: $image-height-large-desktop;
            }
        }
    }
}
// when a panel promo follows a hero (if first in main content wrapper) counter the margin
.center-align > .panel-promo-container:first-child(),
.center-align > .panel-promo-container + .panel-promo-container,
.center-align > .panel-promo-container + .panel-carousel-container  {
    @include counter-margin-medium;

    @include for-tablet-portrait-up {
        @include counter-margin-large;
    }
}
// .center-align > .panel-promo-container + .panel-promo-container {
//     @include margin-medium-offset;

//     @include for-tablet-portrait-up {
//         @include margin-large-offset;
//     }
// }
